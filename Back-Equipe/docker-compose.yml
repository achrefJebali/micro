version: '3.8'

services:
  # Keycloak service with PostgreSQL database
  postgres:
    image: postgres:14.5
    container_name: keycloak-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - micro-network

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - micro-network

  # Configuration Server
  config-server:
    image: config-server:latest
    build:
      context: ../config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - micro-network
    environment:
      - SPRING_PROFILES_ACTIVE=native

  # Eureka Server (Service Discovery)
  eureka-server:
    image: eureka-server:latest
    build:
      context: ../Back-eurika
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      - config-server
    networks:
      - micro-network
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888

  # API Gateway
  api-gateway:
    image: api-gateway:latest
    build:
      context: ../Back-apigetway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8090:8090"
    depends_on:
      - config-server
      - eureka-server
      - keycloak
    networks:
      - micro-network
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/kassil-realm
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/kassil-realm/protocol/openid-connect/certs

  # Kassil Microservice
  kassil-service:
    image: kassil-service:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kassil-service
    ports:
      - "8089:8089"
    depends_on:
      - config-server
      - eureka-server
      - keycloak
    networks:
      - micro-network
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/kassil-realm
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://keycloak:8080/realms/kassil-realm/protocol/openid-connect/certs

  # Python Microservice (Additional microservice with different technology)
  notification-service:
    image: notification-service:latest
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "5000:5000"
    depends_on:
      - eureka-server
      - keycloak
    networks:
      - micro-network
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka/
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=kassil-realm
      - KEYCLOAK_CLIENT_ID=notification-service
      - KEYCLOAK_CLIENT_SECRET=your-client-secret

networks:
  micro-network:
    driver: bridge

volumes:
  postgres_data:
